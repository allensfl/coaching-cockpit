// Minimal API using direct fetch to OpenAI - no external packages
const SYSTEM_INSTRUCTIONS = `Du bist ein achtsamer, tiefgr√ºndiger KI-Coach mit Spezialisierung auf den √úbergang in den Ruhestand.

STIL UND TONALIT√ÑT:
- Respektvoll, empathisch, l√∂sungsorientiert
- Pers√∂nlich, warm, leicht poetisch, echt, differenziert
- Niemals floskelhaft, mit emotionaler Resonanz und sprachlicher Tiefe
- Verwende die Du-Form und deutsche Guillemets ¬´ ¬ª statt Anf√ºhrungszeichen

BEGR√úSSUNG (exakt so verwenden):
¬´Herzlich willkommen! Der Ruhestand er√∂ffnet dir neue M√∂glichkeiten, dich selbst neu zu entdecken und deine St√§rken einzubringen. Unser Coaching ist l√∂sungsorientiert, vertraulich und auf deine Ziele ausgerichtet. Bist du bereit f√ºr den ersten Schritt?¬ª

COACHING-PHASEN (8-Phasen-System):
1. Standortbestimmung: Lade ein, aktuelle Situation zu schildern
2. Emotionale Vertiefung: Identifiziere das zentrale Gef√ºhl mit Bild oder Metapher
3. Zielvision: Entwickle pers√∂nliche Vision f√ºr erf√ºllten Ruhestand
4. Systemanalyse: Beleuchte innere Anteile und Dynamiken
5. Komplement√§rkr√§fte: Analysiere Probleml√∂sungsorientierungen
6. Erfolgsimagination: Lasse Erfolgsszenarien entwickeln
7. Konkrete Schritte: Schlage drei Aktivit√§ten vor
8. Integration: Reflektiere Erfahrungen und plane n√§chste Schritte

ANTWORTL√ÑNGE: Maximal 200 W√∂rter pro Antwort

LERNSTIL-ANPASSUNG:
- Visuell: Nutze Metaphern und Bilder
- Auditiv: Fokus auf Gespr√§ch und Rhythmus  
- Kin√§sthetisch: Praktische √úbungen vorschlagen
- Lesen/Schreiben: Strukturierte Listen und Reflexionsfragen

SICHERHEITSMECHANISMEN:
Bei Warnsignalen (Depression, Suizidalit√§t, Trauma): Session unterbrechen und professionelle Hilfe empfehlen.`;

export default async function handler(req, res) {
  // CORS Headers
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  console.log('üîß Minimal API handler starting...');

  try {
    // Validate API key immediately
    if (!process.env.OPENAI_API_KEY) {
      console.error('‚ùå OPENAI_API_KEY missing');
      return res.status(500).json({ 
        error: 'Server configuration error',
        details: 'API key not configured'
      });
    }

    console.log('‚úÖ API key validated');

    // Extract request data
    const { 
      message, 
      conversationHistory = [], 
      systemPrompt = null,
      chatState = null 
    } = req.body;

    if (!message) {
      console.error('‚ùå No message provided');
      return res.status(400).json({ error: 'Message is required' });
    }

    console.log('üìù Processing message:', {
      messageLength: message.length,
      historyLength: conversationHistory.length,
      hasSystemPrompt: !!systemPrompt,
      hasChatState: !!chatState
    });

    // Use dynamic system prompt or fallback
    const systemInstructions = systemPrompt || SYSTEM_INSTRUCTIONS;

    // Build messages array
    const messages = [
      {
        role: 'system',
        content: systemInstructions
      }
    ];

    // Add recent conversation history (last 8 messages for stability)
    const recentHistory = conversationHistory.slice(-8);
    messages.push(...recentHistory);

    // Add current user message
    messages.push({
      role: 'user',
      content: message
    });

    console.log('üöÄ Making direct fetch to OpenAI API...');
    console.log('üìä Total messages:', messages.length);

    // Direct fetch to OpenAI API
    const openaiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: 'gpt-4',
        messages: messages,
        temperature: 0.7,
        max_tokens: 400,
        presence_penalty: 0.1,
        frequency_penalty: 0.3,
        top_p: 0.9
      }),
    });

    console.log('üì° OpenAI response status:', openaiResponse.status);

    if (!openaiResponse.ok) {
      const errorText = await openaiResponse.text();
      console.error('‚ùå OpenAI API error:', openaiResponse.status, errorText);
      
      throw new Error(`OpenAI API responded with ${openaiResponse.status}: ${errorText}`);
    }

    const openaiData = await openaiResponse.json();
    const aiResponse = openaiData.choices[0].message.content;

    console.log('‚úÖ Response received successfully');
    console.log('üìù Response preview:', aiResponse.substring(0, 100) + '...');

    // Return successful response
    return res.status(200).json({
      response: aiResponse,
      conversationHistory: [
        ...recentHistory,
        { role: 'user', content: message },
        { role: 'assistant', content: aiResponse }
      ],
      metadata: {
        systemPromptUsed: !!systemPrompt,
        chatStateProcessed: !!chatState,
        tokensUsed: openaiData.usage?.total_tokens || 0,
        timestamp: new Date().toISOString(),
        status: 'success'
      }
    });

  } catch (error) {
    console.error('‚ùå Handler error:', error.message);
    console.error('‚ùå Full error:', error);
    
    // User-friendly error responses
    let userMessage = 'Es gab ein technisches Problem. K√∂nnen Sie Ihre Nachricht bitte wiederholen?';
    let statusCode = 500;
    
    if (error.message?.includes('401')) {
      userMessage = 'API-Authentifizierung fehlgeschlagen. Bitte kontaktieren Sie den Support.';
      statusCode = 401;
    } else if (error.message?.includes('429')) {
      userMessage = 'Zu viele Anfragen. Bitte warten Sie einen Moment und versuchen es erneut.';
      statusCode = 429;
    } else if (error.message?.includes('quota')) {
      userMessage = 'Service vor√ºbergehend nicht verf√ºgbar. Bitte versuchen Sie es sp√§ter erneut.';
      statusCode = 503;
    }
    
    return res.status(statusCode).json({ 
      error: userMessage,
      details: process.env.NODE_ENV === 'development' ? error.message : undefined,
      timestamp: new Date().toISOString(),
      status: 'error'
    });
  }
}
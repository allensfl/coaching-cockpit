import OpenAI from 'openai';

// Initialize OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Fallback System Instructions (falls kein dynamischer Prompt gesendet wird)
const FALLBACK_SYSTEM_INSTRUCTIONS = `Du bist ein achtsamer, tiefgr√ºndiger KI-Coach mit Spezialisierung auf den √úbergang in den Ruhestand.

LERNSTIL-ABFRAGE:
Zu Beginn jeder Session frage nach dem bevorzugten Lernstil:
"Wie lernst du am liebsten?"
(Visuell ‚Äì Bilder/Diagramme, Auditiv ‚Äì Gespr√§che/Erkl√§rungen, Kin√§sthetisch ‚Äì √úbungen/Bewegung)
Passe Erkl√§rungen, Metaphern und Beispiele w√§hrend des gesamten Coachings an den Lernstil an.

STIL UND TONALIT√ÑT:
- Respektvoll, empathisch, l√∂sungsorientiert
- Pers√∂nlich, warm, leicht poetisch, echt, differenziert
- Niemals floskelhaft, mit emotionaler Resonanz und sprachlicher Tiefe
- Verwende die Du-Form und deutsche Guillemets ¬´ ¬ª statt Anf√ºhrungszeichen

BEGR√úSSUNG (exakt so verwenden):
¬´Herzlich willkommen! Der Ruhestand er√∂ffnet dir neue M√∂glichkeiten, dich selbst neu zu entdecken und deine St√§rken einzubringen. Unser Coaching ist l√∂sungsorientiert, vertraulich und auf deine Ziele ausgerichtet. Bist du bereit f√ºr den ersten Schritt?¬ª

COACHING-PHASEN (8-Phasen-System):
1. Standortbestimmung: Lade ein, aktuelle Situation zu schildern
2. Emotionale Vertiefung: Identifiziere das zentrale Gef√ºhl mit Bild oder Metapher
3. Zielvision: Entwickle pers√∂nliche Vision f√ºr erf√ºllten Ruhestand
4. Systemanalyse: Beleuchte innere Anteile und Dynamiken
5. Komplement√§rkr√§fte: Analysiere Probleml√∂sungsorientierungen
6. Erfolgsimagination: Lasse Erfolgsszenarien entwickeln
7. Konkrete Schritte: Schlage drei Aktivit√§ten vor
8. Integration: Reflektiere Erfahrungen und plane n√§chste Schritte

ANTWORTL√ÑNGE:
- Erste Phasen: maximal 180 W√∂rter
- Sp√§tere Phasen: maximal 300 W√∂rter

SICHERHEITSMECHANISMEN:
Bei Warnsignalen (Depression, Suizidalit√§t, Trauma, Substanzmissbrauch, schwere Angst):
- Session sofort unterbrechen
- Thema normalisieren und Grenzen kommunizieren
- Ressourcen f√ºr professionelle Unterst√ºtzung anbieten

WAS ICH NICHT TUE:
- Keine finanziellen oder rechtlichen Ratschl√§ge
- Keine Therapie oder Behandlung psychischer St√∂rungen
- Keine therapeutischen Deutungen oder Diagnosen
- Ersetze keinen menschlichen Kontakt, sondern erg√§nze und inspiriere`;

export default async function handler(req, res) {
  // CORS Headers
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    // Enhanced parameter extraction
    const { 
      message, 
      conversationHistory = [], 
      systemPrompt = null,
      chatState = null 
    } = req.body;

    if (!message) {
      return res.status(400).json({ error: 'Message is required' });
    }

    console.log('üéØ Processing enhanced request:', {
      messageLength: message.length,
      historyLength: conversationHistory.length,
      hasSystemPrompt: !!systemPrompt,
      hasChatState: !!chatState,
      currentPhase: chatState?.currentPhase || 'unknown',
      learningStyle: chatState?.learningStyle || 'unknown',
      emotionalState: chatState?.userProfile?.emotionalState || 'unknown'
    });

    // Use dynamic system prompt if available, otherwise fallback
    const systemInstructions = systemPrompt || FALLBACK_SYSTEM_INSTRUCTIONS;

    // Prepare messages for OpenAI
    const messages = [
      {
        role: 'system',
        content: systemInstructions
      }
    ];

    // Add conversation history (limit to last 12 messages for better context)
    const recentHistory = conversationHistory.slice(-12);
    messages.push(...recentHistory);

    // Add current user message
    messages.push({
      role: 'user',
      content: message
    });

    console.log('üöÄ Sending enhanced request to OpenAI...');
    console.log('üìä System prompt preview:', systemInstructions.substring(0, 200) + '...');

    // Enhanced OpenAI API call
    const completion = await openai.chat.completions.create({
      model: 'gpt-4',
      messages: messages,
      temperature: 0.75,  // Optimiert f√ºr Kreativit√§t und Konsistenz
      max_tokens: 500,    // Angepasst f√ºr qualitative Antworten
      presence_penalty: 0.1,   // F√∂rdert neue Themen
      frequency_penalty: 0.4,  // Reduziert Wiederholungen stark
      top_p: 0.9         // Fokussierte aber kreative Antworten
    });

    const response = completion.choices[0].message.content;

    console.log('‚úÖ Enhanced OpenAI response received');
    console.log('üìù Response preview:', response.substring(0, 100) + '...');

    // Enhanced response with metadata
    return res.status(200).json({
      response: response,
      conversationHistory: [
        ...recentHistory,
        { role: 'user', content: message },
        { role: 'assistant', content: response }
      ],
      metadata: {
        systemPromptUsed: !!systemPrompt,
        chatStateProcessed: !!chatState,
        currentPhase: chatState?.currentPhase || null,
        tokensUsed: completion.usage?.total_tokens || 0,
        timestamp: new Date().toISOString()
      }
    });

  } catch (error) {
    console.error('‚ùå Enhanced API error:', error);
    
    // More helpful error messages
    let errorMessage = 'Es gab ein technisches Problem. K√∂nnen Sie Ihre Nachricht bitte wiederholen?';
    
    if (error.message?.includes('API key')) {
      errorMessage = 'API-Konfigurationsproblem. Bitte kontaktieren Sie den Support.';
    } else if (error.message?.includes('rate limit')) {
      errorMessage = 'Zu viele Anfragen. Bitte warten Sie einen Moment.';
    }
    
    return res.status(500).json({ 
      error: errorMessage,
      details: process.env.NODE_ENV === 'development' ? error.message : undefined,
      timestamp: new Date().toISOString()
    });
  }
}
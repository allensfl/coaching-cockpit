// Alternative robust import for Vercel compatibility
import { Configuration, OpenAIApi } from 'openai';

// Fallback configuration
const configuration = new Configuration({
  apiKey: process.env.OPENAI_API_KEY,
});

const openai = new OpenAIApi(configuration);

// Alternative: Direct fetch if OpenAI package fails
const makeOpenAIRequest = async (messages, retryWithFetch = false) => {
  if (!retryWithFetch) {
    try {
      // Try with OpenAI package first
      const completion = await openai.createChatCompletion({
        model: 'gpt-4',
        messages: messages,
        temperature: 0.75,
        max_tokens: 500,
        presence_penalty: 0.1,
        frequency_penalty: 0.4,
        top_p: 0.9
      });
      return completion.data.choices[0].message.content;
    } catch (packageError) {
      console.log('üì¶ OpenAI package failed, trying direct fetch...', packageError.message);
      return makeOpenAIRequest(messages, true);
    }
  }
  
  // Fallback: Direct fetch to OpenAI API
  const response = await fetch('https://api.openai.com/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
    },
    body: JSON.stringify({
      model: 'gpt-4',
      messages: messages,
      temperature: 0.75,
      max_tokens: 500,
      presence_penalty: 0.1,
      frequency_penalty: 0.4,
      top_p: 0.9
    }),
  });

  if (!response.ok) {
    throw new Error(`OpenAI API error: ${response.status} ${response.statusText}`);
  }

  const data = await response.json();
  return data.choices[0].message.content;
};

// Fallback System Instructions
const FALLBACK_SYSTEM_INSTRUCTIONS = `Du bist ein achtsamer, tiefgr√ºndiger KI-Coach mit Spezialisierung auf den √úbergang in den Ruhestand.

STIL UND TONALIT√ÑT:
- Respektvoll, empathisch, l√∂sungsorientiert
- Pers√∂nlich, warm, leicht poetisch, echt, differenziert
- Niemals floskelhaft, mit emotionaler Resonanz und sprachlicher Tiefe
- Verwende die Du-Form und deutsche Guillemets ¬´ ¬ª statt Anf√ºhrungszeichen

BEGR√úSSUNG (exakt so verwenden):
¬´Herzlich willkommen! Der Ruhestand er√∂ffnet dir neue M√∂glichkeiten, dich selbst neu zu entdecken und deine St√§rken einzubringen. Unser Coaching ist l√∂sungsorientiert, vertraulich und auf deine Ziele ausgerichtet. Bist du bereit f√ºr den ersten Schritt?¬ª

COACHING-PHASEN (8-Phasen-System):
1. Standortbestimmung: Lade ein, aktuelle Situation zu schildern
2. Emotionale Vertiefung: Identifiziere das zentrale Gef√ºhl mit Bild oder Metapher
3. Zielvision: Entwickle pers√∂nliche Vision f√ºr erf√ºllten Ruhestand
4. Systemanalyse: Beleuchte innere Anteile und Dynamiken
5. Komplement√§rkr√§fte: Analysiere Probleml√∂sungsorientierungen
6. Erfolgsimagination: Lasse Erfolgsszenarien entwickeln
7. Konkrete Schritte: Schlage drei Aktivit√§ten vor
8. Integration: Reflektiere Erfahrungen und plane n√§chste Schritte

ANTWORTL√ÑNGE: Maximal 200 W√∂rter pro Antwort

SICHERHEITSMECHANISMEN:
Bei Warnsignalen (Depression, Suizidalit√§t, Trauma): Session unterbrechen und professionelle Hilfe empfehlen.`;

export default async function handler(req, res) {
  // CORS Headers
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    console.log('üîß Starting robust API handler...');
    
    // Check API key first
    if (!process.env.OPENAI_API_KEY) {
      console.error('‚ùå OPENAI_API_KEY not found in environment variables');
      return res.status(500).json({ 
        error: 'Server configuration error - API key missing',
        details: 'Please check environment variables'
      });
    }

    console.log('‚úÖ API key found, processing request...');

    const { 
      message, 
      conversationHistory = [], 
      systemPrompt = null,
      chatState = null 
    } = req.body;

    if (!message) {
      return res.status(400).json({ error: 'Message is required' });
    }

    console.log('üìù Request data:', {
      messageLength: message.length,
      historyLength: conversationHistory.length,
      hasSystemPrompt: !!systemPrompt,
      hasChatState: !!chatState
    });

    // Use dynamic system prompt if available, otherwise fallback
    const systemInstructions = systemPrompt || FALLBACK_SYSTEM_INSTRUCTIONS;

    // Prepare messages for OpenAI
    const messages = [
      {
        role: 'system',
        content: systemInstructions
      }
    ];

    // Add conversation history (limit to last 10 messages)
    const recentHistory = conversationHistory.slice(-10);
    messages.push(...recentHistory);

    // Add current user message
    messages.push({
      role: 'user',
      content: message
    });

    console.log('üöÄ Sending request to OpenAI...');
    console.log('üìä Messages count:', messages.length);

    // Make robust OpenAI request
    const response = await makeOpenAIRequest(messages);

    console.log('‚úÖ Response received from OpenAI');
    console.log('üìù Response preview:', response.substring(0, 100) + '...');

    return res.status(200).json({
      response: response,
      conversationHistory: [
        ...recentHistory,
        { role: 'user', content: message },
        { role: 'assistant', content: response }
      ],
      metadata: {
        systemPromptUsed: !!systemPrompt,
        chatStateProcessed: !!chatState,
        timestamp: new Date().toISOString(),
        status: 'success'
      }
    });

  } catch (error) {
    console.error('‚ùå API Handler Error:', error);
    console.error('‚ùå Error stack:', error.stack);
    
    // More detailed error handling
    let errorMessage = 'Es gab ein technisches Problem. K√∂nnen Sie Ihre Nachricht bitte wiederholen?';
    let statusCode = 500;
    
    if (error.message?.includes('API key')) {
      errorMessage = 'API-Schl√ºssel Problem. Bitte kontaktieren Sie den Support.';
      statusCode = 401;
    } else if (error.message?.includes('rate limit')) {
      errorMessage = 'Zu viele Anfragen. Bitte warten Sie einen Moment.';
      statusCode = 429;
    } else if (error.message?.includes('fetch')) {
      errorMessage = 'Netzwerkproblem. Bitte versuchen Sie es erneut.';
      statusCode = 503;
    }
    
    return res.status(statusCode).json({ 
      error: errorMessage,
      details: process.env.NODE_ENV === 'development' ? error.message : undefined,
      timestamp: new Date().toISOString(),
      status: 'error'
    });
  }
}